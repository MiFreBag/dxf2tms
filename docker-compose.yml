version: '3'

services:
  server:
    build: ./server
    ports:
      - "8000:8000"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/output:/app/output
      - ./server/templates:/app/templates
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - QGIS_PREFIX_PATH=/usr
      - QT_QPA_PLATFORM=offscreen
      - XDG_RUNTIME_DIR=/tmp/runtime-root
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  client:
    build: ./client
    restart: always
    expose:
      - "80"

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/ssl/private:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    depends_on:
      - server
      - client
    restart: always

  redis:
    image: redis:alpine
    container_name: dxf2geopdf-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Optional: MapTiler Engine wird bei Bedarf via Docker SDK gestartet
  # maptiler:
  #   image: maptiler/engine:latest
  #   container_name: maptiler-engine
  #   volumes:
  #     - ./uploads:/input:ro
  #     - ./maptiler_output:/output:rw
  #   environment:
  #     - MAPTILER_LICENSE_KEY=${MAPTILER_LICENSE_KEY}
  #   networks:
  #     - app-network
  #   profiles:
  #     - tools

  n8n:
    image: docker.n8n.io/n8nio/n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_SECURE_COOKIE=false
      - N8N_EDITOR_BASE_URL=https://10.254.64.14/n8n/
      - WEBHOOK_URL=https://10.254.64.14/n8n/
      - N8N_PATH=/n8n/
    volumes:
      - n8n_data:/home/node/.n8n
    restart: always

  tileserver:
    image: maptiler/tileserver-gl
    container_name: tileserver-gl
    volumes:
      - ./server/output:/data:rw
      - ./tileserver:/data
    command: ["-p", "80", "-c", "/data/conf.json"]
    ports:
      - "8081:80"
    restart: unless-stopped

  postgres:
    image: postgis/postgis:15-3.3
    container_name: dxf2geopdf-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-geopdf}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - full

  prometheus:
    image: prom/prometheus
    container_name: dxf2geopdf-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: dxf2geopdf-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis-data:
  postgres-data:
  n8n-data:
  nginx-cache:
  prometheus-data:
  grafana-data:
