user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    client_max_body_size 100M; # Erlaubt grössere Uploads

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip Kompression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/javascript application/xml+rss 
               application/json image/svg+xml;

    # Cache-Einstellungen für statische Dateien
    map $sent_http_content_type $expires {
        default                    off;
        text/html                  epoch;
        text/css                   max;
        application/javascript     max;
        ~image/                    1M;
    }

    # Upstream für die API
    upstream api {
        server server:8000;
    }
    # Upstream für den Client
    upstream client {
        server client:80;
    }

    # HTTP → HTTPS Weiterleitung
    server {
        listen 80;
        server_name _; # Fängt alle Hostnamen ab
        return 301 https://$host$request_uri;
    }

    # HTTPS-Serverblock
    server {
        listen 443 ssl;
        server_name _; # Fängt alle Hostnamen ab

        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        ssl_certificate /etc/ssl/private/self-signed.crt;
        ssl_certificate_key /etc/ssl/private/self-signed.key;

        # Frontend (Client) per Proxy weiterleiten
        location / {
            proxy_pass http://client;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Proxy (FastAPI-Backend)
        location ~ ^/api/(.*)$ {
            proxy_pass http://api/api/$1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            client_max_body_size 500M;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # n8n-Workflow-Tool
        location /n8n/ {

            rewrite ^/n8n(/.*)$ $1 break;  # relative Weiterleitung
            proxy_pass http://n8n:5678;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
        # NEU: expliziter Block für n8n statische Assets
        location /n8nassets/ {
            proxy_pass http://n8n:5678/n8nassets/;
            proxy_set_header Host $host;
        }

        # NEU: Favicon (optional)
        location /n8nfavicon.ico {
            proxy_pass http://n8n:5678/n8nfavicon.ico;
            proxy_set_header Host $host;
        }

        location = /favicon.ico {
    proxy_pass http://n8n:5678/favicon.ico;
}

        # Tileserver-GL mit CORS-Header für Tiles
        location /mapserver/ {
            rewrite ^/mapserver/(.*)$ /$1 break;
            proxy_pass http://tileserver:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header Content-Security-Policy "upgrade-insecure-requests";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "*";
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, OPTIONS";
                add_header Access-Control-Allow-Headers "*";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Beispiel für externen Tile-Proxy (z.B. Swisstopo, falls benötigt)
         location /swisstopo/ {
             proxy_pass https://wmts.geo.admin.ch/;
             proxy_set_header Host wmts.geo.admin.ch;
             add_header Access-Control-Allow-Origin *;
             add_header Access-Control-Allow-Methods "GET, OPTIONS";
             add_header Access-Control-Allow-Headers "*";
             if ($request_method = 'OPTIONS') {
                 add_header Access-Control-Allow-Origin *;
                 add_header Access-Control-Allow-Methods "GET, OPTIONS";
                 add_header Access-Control-Allow-Headers "*";
                 add_header Content-Length 0;
                 add_header Content-Type text/plain;
                 return 204;
             }
         }

        # OpenAPI und Swagger UI Weiterleitung
        location /openapi.json {
            proxy_pass http://server:8000/api/openapi.json;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /docs {
            proxy_pass http://server:8000/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # MapTiler Tiles - Statisches Serving
        location /maptiler/tiles/ {
            alias /var/www/maptiler_output/; # Pfad, wo die generierten Tiles liegen
            
            # CORS Headers
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
            
            # Cache Headers für Tiles
            expires 7d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            
            # Optimierungen für Tile-Serving
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            
            # Fehlerbehandlung
            try_files $uri $uri/ =404;
            
            # Logging reduzieren für Tiles
            access_log off;
            
            # Spezielle MIME-Types
            location ~ \.pbf$ {
                add_header Content-Type "application/x-protobuf";
            }
            
            location ~ \.json$ {
                add_header Content-Type "application/json";
            }
        }

        # TileJSON endpoint
        location ~ ^/maptiler/tiles/([^/]+)/tilejson\.json$ {
            alias /var/www/maptiler_output/$1/tilejson.json;
            add_header Content-Type "application/json";
            add_header Access-Control-Allow-Origin * always;
        }

        # MBTiles serving (benötigt nginx-mod-http-lua)
        # HINWEIS: Dieses Feature erfordert, dass NGINX mit dem ngx_http_lua_module kompiliert wurde.
        # Standard-NGINX-Images enthalten dies nicht. Du müsstest ein OpenResty-Image verwenden
        # oder NGINX manuell mit Lua-Modul kompilieren.
        # location ~ ^/maptiler/mbtiles/([^/]+)/([0-9]+)/([0-9]+)/([0-9]+)\.png$ {
        #     content_by_lua_block {
        #         local mbtiles_file = "/var/www/maptiler_output/" .. ngx.var[1] .. "/mbtiles/" .. ngx.var[1] .. ".mbtiles"
        #         local z = ngx.var[2]
        #         local x = ngx.var[3]
        #         local y = ngx.var[4]
                
        #         -- Flip Y coordinate for TMS
        #         local flip_y = math.pow(2, z) - 1 - y
                
        #         -- SQLite query to get tile
        #         local sqlite3 = require("lsqlite3")
        #         local db = sqlite3.open(mbtiles_file)
                
        #         if db then
        #             local stmt = db:prepare("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?")
        #             stmt:bind_values(z, x, flip_y)
                    
        #             if stmt:step() == sqlite3.ROW then
        #                 local tile_data = stmt:get_value(0)
        #                 ngx.header.content_type = "image/png"
        #                 ngx.header["Cache-Control"] = "public, max-age=604800"
        #                 ngx.print(tile_data)
        #             else
        #                 ngx.exit(404)
        #             end
                
        #             stmt:finalize()
        #             db:close()
        #         else
        #             ngx.exit(404)
        #         end
        #     }
        # }

        # Statische Assets (allgemein, z.B. Favicon, etc.)
        location /static/ {
            alias /usr/share/nginx/html/static/; # Oder ein anderer Pfad für allgemeine statische Dateien
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Metrics endpoint (optional)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1; # Erlaube nur Zugriff von localhost
            allow 10.0.0.0/8; # Erlaube Zugriff aus dem Docker-Netzwerk
            deny all;
        }

        # Weiterleitung für Tile-Server Styles
        location /styles/ {
            proxy_pass http://tileserver:80/styles/; # Behalte dies, falls tileserver:80 Styles liefert
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Projekt-Dokumentation (Markdown/HTML) statisch ausliefern
        location /project-docs/ {
            alias /app/docs/; # Pfad zur Dokumentation im NGINX-Container
            autoindex on;
            add_header Access-Control-Allow-Origin *;
        }
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=tiles_limit:10m rate=100r/s;

    # Cache für Tiles
    proxy_cache_path /var/cache/nginx/tiles levels=1:2 keys_zone=tiles_cache:100m max_size=10g inactive=7d use_temp_path=off;
}
